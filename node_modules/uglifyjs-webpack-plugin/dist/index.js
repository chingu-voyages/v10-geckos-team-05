'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/

var SourceMapConsumer = require('source-map').SourceMapConsumer;
var SourceMapSource = require('webpack-sources').SourceMapSource;
var RawSource = require('webpack-sources').RawSource;
var RequestShortener = require('webpack/lib/RequestShortener');
var ModuleFilenameHelpers = require('webpack/lib/ModuleFilenameHelpers');
var uglify = require('uglify-js');

var UglifyJsPlugin = function () {
  function UglifyJsPlugin(options) {
    _classCallCheck(this, UglifyJsPlugin);

    if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) !== 'object' || Array.isArray(options)) options = {};
    if (typeof options.compressor !== 'undefined') options.compress = options.compressor;
    this.options = options;
  }

  _createClass(UglifyJsPlugin, [{
    key: 'apply',
    value: function apply(compiler) {
      var options = this.options;
      options.test = options.test || /\.js($|\?)/i;

      var requestShortener = new RequestShortener(compiler.context);
      compiler.plugin('compilation', function (compilation) {
        if (options.sourceMap) {
          compilation.plugin('build-module', function (module) {
            // to get detailed location info about errors
            module.useSourceMap = true;
          });
        }
        compilation.plugin('optimize-chunk-assets', function (chunks, callback) {
          var _files2;

          var files = [];
          chunks.forEach(function (chunk) {
            var _files;

            return (_files = files).push.apply(_files, _toConsumableArray(chunk.files));
          });
          (_files2 = files).push.apply(_files2, _toConsumableArray(compilation.additionalChunkAssets));
          files = files.filter(ModuleFilenameHelpers.matchObject.bind(undefined, options));
          files.forEach(function (file) {
            var oldWarnFunction = uglify.AST_Node.warn_function;
            var warnings = [];
            var sourceMap = void 0;
            try {
              var asset = compilation.assets[file];
              if (asset.__UglifyJsPlugin) {
                compilation.assets[file] = asset.__UglifyJsPlugin;
                return;
              }
              var input = void 0;
              var inputSourceMap = void 0;
              if (options.sourceMap) {
                if (asset.sourceAndMap) {
                  var sourceAndMap = asset.sourceAndMap();
                  inputSourceMap = sourceAndMap.map;
                  input = sourceAndMap.source;
                } else {
                  inputSourceMap = asset.map();
                  input = asset.source();
                }
                sourceMap = new SourceMapConsumer(inputSourceMap);
                uglify.AST_Node.warn_function = function (warning) {
                  // eslint-disable-line camelcase
                  var match = /\[.+:([0-9]+),([0-9]+)\]/.exec(warning);
                  var line = +match[1];
                  var column = +match[2];
                  var original = sourceMap.originalPositionFor({
                    line: line,
                    column: column
                  });
                  if (!original || !original.source || original.source === file) return;
                  warnings.push(warning.replace(/\[.+:([0-9]+),([0-9]+)\]/, '') + '[' + requestShortener.shorten(original.source) + ':' + original.line + ',' + original.column + ']');
                };
              } else {
                input = asset.source();
                uglify.AST_Node.warn_function = function (warning) {
                  // eslint-disable-line camelcase
                  warnings.push(warning);
                };
              }
              uglify.base54.reset();
              var ast = uglify.parse(input, {
                filename: file
              });
              if (options.compress !== false) {
                ast.figure_out_scope();
                var compress = uglify.Compressor(options.compress || {
                  warnings: false
                }); // eslint-disable-line new-cap
                ast = ast.transform(compress);
              }
              if (options.mangle !== false) {
                ast.figure_out_scope(options.mangle || {});
                ast.compute_char_frequency(options.mangle || {});
                ast.mangle_names(options.mangle || {});
                if (options.mangle && options.mangle.props) {
                  uglify.mangle_properties(ast, options.mangle.props);
                }
              }
              var output = {};
              output.comments = Object.prototype.hasOwnProperty.call(options, 'comments') ? options.comments : /^\**!|@preserve|@license/;
              output.beautify = options.beautify;
              // TODO: fix this!!!
              for (var k in options.output) {
                // eslint-disable-line
                output[k] = options.output[k];
              }
              var map = void 0;
              if (options.sourceMap) {
                map = uglify.SourceMap({ // eslint-disable-line new-cap
                  file: file,
                  root: ''
                });
                output.source_map = map; // eslint-disable-line camelcase
              }
              var stream = uglify.OutputStream(output); // eslint-disable-line new-cap
              ast.print(stream);
              if (map) map = '' + map;
              stream = '' + stream;

              var source = map ? new SourceMapSource(stream, file, JSON.parse(map), input, inputSourceMap) : new RawSource(stream);

              compilation.assets[file] = source;
              asset.__UglifyJsPlugin = source;

              if (warnings.length > 0) {
                compilation.warnings.push(new Error(file + ' from UglifyJs\n' + warnings.join('\n')));
              }
            } catch (err) {
              if (err.line) {
                var original = sourceMap && sourceMap.originalPositionFor({
                  line: err.line,
                  column: err.col
                });
                if (original && original.source) {
                  compilation.errors.push(new Error(file + ' from UglifyJs\n' + err.message + ' [' + requestShortener.shorten(original.source) + ':' + original.line + ',' + original.column + '][' + file + ':' + err.line + ',' + err.col + ']'));
                } else {
                  compilation.errors.push(new Error(file + ' from UglifyJs\n' + err.message + ' [' + file + ':' + err.line + ',' + err.col + ']'));
                }
              } else if (err.msg) {
                compilation.errors.push(new Error(file + ' from UglifyJs\n' + err.msg));
              } else {
                compilation.errors.push(new Error(file + ' from UglifyJs\n' + err.stack));
              }
            } finally {
              uglify.AST_Node.warn_function = oldWarnFunction; // eslint-disable-line camelcase
            }
          });
          callback();
        });
      });
    }
  }]);

  return UglifyJsPlugin;
}();

module.exports = UglifyJsPlugin;